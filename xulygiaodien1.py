from PyQt6 import QtWidgets, uic
from PyQt6.QtWidgets import QMessageBox, QLabel, QFrame, QPushButton, QVBoxLayout, QTableWidgetItem
from PyQt6.QtGui import QPixmap
from PyQt6.QtCore import Qt
import sys
from Function import *  # Import class qu·∫£n l√Ω s·∫£n ph·∫©m v√† gi·ªè h√†ng

class Ui(QtWidgets.QMainWindow):
    def __init__(self):
        super(Ui, self).__init__()
        uic.loadUi('giaodien.ui', self)
        # Kh·ªüi t·∫°o c√°c bi·∫øn v√† tham chi·∫øu UI
        self.functions = SmartMartFunctions()  # Class qu·∫£n l√Ω s·∫£n ph·∫©m v√† gi·ªè h√†ng
        self.selected_frames = []  # Danh s√°ch c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
        self.cart_table = self.findChild(QtWidgets.QTableWidget, "cart_table")
        self.label_total = self.findChild(QtWidgets.QLabel, "label_total")
        self.search_bar = self.findChild(QtWidgets.QLineEdit, "search_bar")
        self.scroll_area = self.findChild(QtWidgets.QScrollArea, "scrollArea_products")
        self.product_container = self.findChild(QtWidgets.QGridLayout, "productContainer")

        self.lienketnutlenh()
        self.setup_products()
        self.show()

    def lienketnutlenh(self):
        # K·∫øt n·ªëi c√°c n√∫t v·ªõi h√†m x·ª≠ l√Ω
        self.pushButton_SEARCH.clicked.connect(self.search_product)
        self.pushButton_ADD.clicked.connect(self.add_to_cart)
        self.pushButton_REMOVE.clicked.connect(self.remove_from_cart)
        self.pushButton_CHECKOUT.clicked.connect(self.checkout)

        # K·∫øt n·ªëi c√°c n√∫t danh m·ª•c v·ªõi filter_product
        self.pushButton_Beverages.clicked.connect(lambda: self.filter_product("Beverages"))
        self.pushButton_FastFood.clicked.connect(lambda: self.filter_product("Fast Food"))
        self.pushButton_Snacks.clicked.connect(lambda: self.filter_product("Snacks"))
        self.pushButton_PersonalCares.clicked.connect(lambda: self.filter_product("Personal Cares"))

    def setup_products(self):
        # Thi·∫øt l·∫≠p giao di·ªán s·∫£n ph·∫©m ban ƒë·∫ßu
        self.product_container.setSpacing(10)  # Gi√£n c√°ch gi·ªØa c√°c s·∫£n ph·∫©m
        self.load_products()

    def load_products(self):
        # L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ SmartMartFunctions
        self.products = self.functions.products

        # Hi·ªÉn th·ªã danh m·ª•c m·∫∑c ƒë·ªãnh (v√≠ d·ª•: "Beverages")
        self.filter_product("Beverages")

    def add_product(self, product, row, col):
        # T·∫°o frame s·∫£n ph·∫©m
        product_frame = QFrame()
        product_frame.setLayout(QVBoxLayout())

        # Hi·ªÉn th·ªã ·∫£nh s·∫£n ph·∫©m
        label_image = QLabel()
        pixmap = QPixmap(product.image)  # ƒê∆∞·ªùng d·∫´n ·∫£nh t·ª´ JSON
        if not pixmap.isNull():
            label_image.setPixmap(pixmap)
        else:
            label_image.setText("No Image")  # N·∫øu kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh
        label_image.setScaledContents(True)

        # Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m
        button = QPushButton(f"{product.name}\n{product.price:,}ƒë\nStock: {product.stock}")
        button.clicked.connect(lambda checked, frame=product_frame: self.hightlight(frame))
        button.product_data = product  # L∆∞u ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m v√†o n√∫t (s·ª≠a ƒë·ªïi)

        # Th√™m c√°c widget v√†o frame s·∫£n ph·∫©m
        product_frame.layout().addWidget(label_image)
        product_frame.layout().addWidget(button)

        # Th√™m frame s·∫£n ph·∫©m v√†o container
        self.product_container.addWidget(product_frame, row, col)

    def add_to_cart(self):
        # L·∫•y s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn t·ª´ danh s√°ch highlight
        if not self.selected_frames:
            QMessageBox.warning(self, "Error", "Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ th√™m v√†o gi·ªè h√†ng.")
            return

        # Duy·ªát qua t·ª´ng frame s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
        for selected_frame in self.selected_frames:
            button = selected_frame.findChild(QPushButton)
            if button and hasattr(button, "product_data"):
                product = button.product_data  # L·∫•y ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m t·ª´ n√∫t

                # Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho tr∆∞·ªõc khi th√™m v√†o gi·ªè h√†ng
                if product.stock <= 0:
                    QMessageBox.warning(self, "Error", f"S·∫£n ph·∫©m '{product.name}' ƒë√£ h·∫øt h√†ng.")
                    continue  # B·ªè qua s·∫£n ph·∫©m n√†y n·∫øu h·∫øt h√†ng

                # Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
                if self.functions.cart.has_item(product.id):  # N·∫øu ƒë√£ c√≥ trong gi·ªè h√†ng
                    self.functions.cart.update_item_quantity(product.id, 1)  # TƒÉng s·ªë l∆∞·ª£ng l√™n 1
                else:  # N·∫øu ch∆∞a c√≥ trong gi·ªè h√†ng
                    if not self.functions.add_to_cart(product.id):  # Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng
                        QMessageBox.warning(self, "Error", f"Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m '{product.name}' v√†o gi·ªè h√†ng.")
                        continue  # B·ªè qua s·∫£n ph·∫©m n√†y n·∫øu kh√¥ng th·ªÉ th√™m

                # Gi·∫£m s·ªë l∆∞·ª£ng stock c·ªßa s·∫£n ph·∫©m
                product.stock -= 1  # Gi·∫£m s·ªë l∆∞·ª£ng t·ªìn kho
                if product.stock < 0:
                    product.stock = 0  # ƒê·∫£m b·∫£o stock kh√¥ng √¢m

        # C·∫≠p nh·∫≠t l·∫°i b·∫£ng gi·ªè h√†ng sau khi x·ª≠ l√Ω t·∫•t c·∫£ s·∫£n ph·∫©m
        self.update_cart_table()
        self.load_products()
        # üî• C·∫≠p nh·∫≠t t·ªïng gi√° ngay l·∫≠p t·ª©c     #n√® m·ªõi them
        self.update_total_price()
        # X√≥a danh s√°ch s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn sau khi th√™m v√†o gi·ªè h√†ng
        self.selected_frames.clear()

    def update_total_price(self):     #voi n√†y m·ªõi them
        """C·∫≠p nh·∫≠t t·ªïng gi√° ti·ªÅn c·ªßa gi·ªè h√†ng ngay l·∫≠p t·ª©c."""
        total_price = self.functions.cart.get_total()  # L·∫•y t·ªïng gi√° t·ª´ gi·ªè h√†ng
        self.label_total.setText(f"{total_price:,.0f}ƒë")  # C·∫≠p nh·∫≠t giao di·ªán

    def update_cart_table(self):
        self.cart_table.setRowCount(0)  # X√≥a t·∫•t c·∫£ c√°c d√≤ng hi·ªán t·∫°i
        for row, item in enumerate(self.functions.cart.to_dict()):  # Duy·ªát qua t·ª´ng m·ª•c trong gi·ªè h√†ng
            product = self.functions.get_product_by_id(item['product_id'])  # T√¨m s·∫£n ph·∫©m b·∫±ng product_id
            if product:
                self.cart_table.insertRow(row)
                # T√™n s·∫£n ph·∫©m
                self.cart_table.setItem(row, 0, QTableWidgetItem(product.name))
                # S·ªë l∆∞·ª£ng
                self.cart_table.setItem(row, 1, QTableWidgetItem(str(item['qty'])))  # Chuy·ªÉn s·ªë l∆∞·ª£ng th√†nh chu·ªói
                # Gi√°
                self.cart_table.setItem(row, 2, QTableWidgetItem(f"{product.price:,}ƒë"))

    def search_product(self):
        # T√¨m ki·∫øm s·∫£n ph·∫©m theo t·ª´ kh√≥a
        search_text = self.search_bar.text().lower()

        # X√≥a c√°c widget c≈©
        for i in reversed(range(self.product_container.count())):
            widget = self.product_container.itemAt(i).widget()
            if widget:
                widget.deleteLater()

        # Hi·ªÉn th·ªã s·∫£n ph·∫©m ph√π h·ª£p v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm
        row, col = 0, 0
        for product in self.functions.products:
            if search_text in product.name.lower():
                self.add_product(product, row, col)
                col += 1
                if col >= 3:  # 3 c·ªôt m·ªói h√†ng
                    col = 0
                    row += 1

    def hightlight(self, selected_frame):
        # Highlight s·∫£n ph·∫©m khi ƒë∆∞·ª£c ch·ªçn
        if selected_frame in self.selected_frames:
            # N·∫øu frame ƒë√£ ƒë∆∞·ª£c ch·ªçn, b·ªè ch·ªçn n√≥
            self.selected_frames.remove(selected_frame)
            selected_frame.setStyleSheet("QFrame { border: none; }")
        else:
            # N·∫øu frame ch∆∞a ƒë∆∞·ª£c ch·ªçn, th√™m v√†o danh s√°ch ch·ªçn
            self.selected_frames.append(selected_frame)
            selected_frame.setStyleSheet("""
                QFrame {
                    border: 2px solid #ADD8E6;  /* Vi·ªÅn xanh nh·∫°t */
                    border-radius: 4px;
                }
                QLabel, QPushButton {
                    border: none;  /* ƒê·∫£m b·∫£o QLabel v√† QPushButton kh√¥ng b·ªã vi·ªÅn */
                    background: transparent;
                }
            """)

    def remove_from_cart(self):
        # Ki·ªÉm tra xem gi·ªè h√†ng c√≥ tr·ªëng kh√¥ng
        if self.cart_table.rowCount() == 0:
            QMessageBox.warning(self, "Error", "Gi·ªè h√†ng ƒëang tr·ªëng.")
            return
        selected_row = self.cart_table.currentRow()
        if selected_row == -1:
            QMessageBox.warning(self, "Error", "Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m trong gi·ªè h√†ng.")
            return
        product_name_item = self.cart_table.item(selected_row, 0)
        if not product_name_item:
            QMessageBox.warning(self, "Error", "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn.")
            return
        product_name = product_name_item.text()  # L·∫•y t√™n s·∫£n ph·∫©m
        product_to_remove = None
        for item in self.functions.cart.to_dict():
            product = self.functions.get_product_by_id(item['product_id'])
            if product and product.name == product_name:
                product_to_remove = product
                break
        if not product_to_remove:
            QMessageBox.warning(self, "Error", "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng.")
            return
        qty_in_cart = item['qty']
        self.functions.cart.remove_item(product_to_remove.id)
        product_to_remove.stock += qty_in_cart
        self.update_cart_table()
        # C·∫≠p nh·∫≠t l·∫°i danh s√°ch s·∫£n ph·∫©m hi·ªÉn th·ªã
        self.load_products()
        QMessageBox.information(self, "Success", f"S·∫£n ph·∫©m '{product_name}' ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng.")

    def checkout(self):
        # G·ªçi h√†m checkout t·ª´ ƒë·ªëi t∆∞·ª£ng SmartMartFunctions
        total = self.functions.checkout()
        if total == 0:
            QMessageBox.warning(self, "Error", "Gi·ªè h√†ng ƒëang tr·ªëng ho·∫∑c thanh to√°n kh√¥ng th√†nh c√¥ng.")
        else:
            self.label_total.setText(f"{total:,.0f}ƒë")  #M·ªõi b·ªè ch·ªØ t·ªïng ti·ªÅn
            QMessageBox.information(self, "Checkout", f"T·ªïng ti·ªÅn: {total:,}ƒë\nThanh to√°n th√†nh c√¥ng!")
            self.update_cart_table()  # C·∫≠p nh·∫≠t l·∫°i b·∫£ng gi·ªè h√†ng

    def filter_product(self, category):
        if hasattr(self, "selected_frames"):
            self.selected_frames.clear()
        # L·ªçc s·∫£n ph·∫©m theo category
        filtered_products = [p for p in self.functions.products if p.category == category]
        # X√≥a widget c≈©
        for i in reversed(range(self.product_container.count())):
            widget = self.product_container.itemAt(i).widget()
            if widget is not None:
                widget.deleteLater()
        # Hi·ªÉn th·ªã s·∫£n ph·∫©m m·ªõi
        row, col = 0, 0
        for product in filtered_products:
            self.add_product(product, row, col)
            col = (col + 1) % 3  # 3 c·ªôt/h√†ng
            row += 1 if col == 0 else 0


app = QtWidgets.QApplication(sys.argv)
window = Ui()
app.exec()
